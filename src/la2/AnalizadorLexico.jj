PARSER_BEGIN(lexer)
package la2;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import funciones.*;
class lexer
{
  //static Identificador temp = new Identificador();
  public static ArrayList<Identificador> Identificadores = new ArrayList<Identificador>();
	static Token identifier;
	 static Token valor;
	 static Token tipo;
	public static void main(String[] args) throws ParseException, FileNotFoundException
	{
		try
		{
			lexer analizador=new lexer(new FileInputStream("C:\\Users\\christian\\Desktop\\Automatas2\\src\\la2\\prueba.txt"));
			//analizador.Start();
			analizador.programa();
			
			 for (Identificador v : Identificadores){
			  
                        	System.out.println(
                        			"Posicion: "+v.getPosicion()+
                        			", Nombre: "+v.getNombre()+
                        			", TipoDato: "+v.getTipoDato()+
                        			", Tipo: "+v.getTipo()+
                        			", Valor: "+v.getValor()+
                        			", Modificador: "+v.getModificador()+
                        			", Uso: "+v.getUso()
                        			 );
                
                        }
			System.out.println("La cadena fué aceptada");
		}
		catch(ParseException e)
		{
			System.out.println(e.getMessage());
			//system.out.println("Se han encontrado errores, falló al compilar");
		}
	}
}

PARSER_END(lexer)
/* Ignorados */
SKIP: {" " | "\t" | "\r" | "\n" }

/* Palabras Reservadas */
TOKEN :
{
< MODIFIER: "private" | "public"|"protected" >
| < CLASS: "class" >
| < TYPE_SPECIFIER: "boolean" | "int" >
| < IF: "if" >
| < WHILE: "while" >
}

/* Separadores */
TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < SEMICOLON: ";" >
}


/* Operadores */
TOKEN :
{
  < ASSIGN: "=" >
| < EXPRESSION: ">" | "<" | "==" | "<=" | ">=" | "!=" >
| < PLUS: "+" >
| < MINUS: "-" >
}

/* Literales */
TOKEN:
{
< INTEGER_LITERAL: ["1"-"9"] (["0"-"9"])* >
|< BOOLEAN_LITERAL: "false" | "true" >
}

/* Identificador */
TOKEN:
{
	< IDENTIFIER:(["a"-"z","_"])* >{}
}

void programa():{}{
	
   {Token modificador;
	Token identificador;
	Token tipo;
	}
	try{
		modificador=<MODIFIER> tipo=<CLASS> identificador=<IDENTIFIER>{
		   Identificador tempGeneral= new Identificador();

	  tempGeneral.setPosicion(token.beginLine);
	  tempGeneral.setTipo("Clase");
	  tempGeneral.setUso("Declaracion");
	  tempGeneral.setModificador(modificador.image);
	  tempGeneral.setTipoDato("No aplica");
	  tempGeneral.setNombre(identificador.image);
	  tempGeneral.setValor("No aplica");
	  Identificadores.add(tempGeneral);
		 //temp.setModificador(modificador.image);
		 // temp.setNombre(identificador.image);
		 // Identificadores.add(temp);
		  //System.out.println(temp.getModificador());
		  //System.out.println();
		  //System.out.println(identificador.image);
		  
		} <LBRACE> (variable_declaration()| statement())* <RBRACE>
		
		
	}catch(ParseException e){
		System.out.println("Error de Sintaxis");
		System.out.println(e.toString());
	}
	
}
/*Métodos para field_declaration*/
void field_declaration():{}{
	variable_declaration()
	
}

void variable_declaration():{}{
  {
   Token variable;
   Token modificador;
    Token tipoDato;}
    
	modificador=<MODIFIER> type() variable_declarator()<SEMICOLON>
	
{

  Identificador tempGeneral= new Identificador();
  tempGeneral.setPosicion(token.beginLine);
	  tempGeneral.setTipo("variable");
	  tempGeneral.setUso("Declaracion");
	  tempGeneral.setModificador(modificador.image);
	  tempGeneral.setTipoDato(tipo.image);
	  tempGeneral.setNombre(identifier.image);
	  tempGeneral.setValor(valor.image);
	    ValidarAsignacion.existe(Identificadores,tempGeneral);
	  Identificadores.add(tempGeneral);

	  int tipo1=valor.kind;
	  int tipo2=identifier.kind;
	  ValidarAsignacion.validar(tipo1,valor,token,identifier,tipo);
	
	  
  //temp.setModificador(modificador.image);
	 //Identificadores.add(temp);
  //System.out.println(modificador.image);
 }
}

void type():{}{
	tipo=<TYPE_SPECIFIER>
}

void variable_declarator():{}{
	{
	 }

	 
	identifier=<IDENTIFIER> <ASSIGN> (valor=<INTEGER_LITERAL> | valor=<BOOLEAN_LITERAL>)
	{
	
	  
	  //System.out.println(valor);
	  //System.out.println(identifier);
	}
}

/*Metodos para statement*/
void statement():{}{
	variable_declaration() | if_statement() | while_statement()
}

void if_statement():{}{
	<IF> <LPAREN> expression() <RPAREN> statement()
}

void while_statement():{}{
	<WHILE> <LPAREN> expression() <RPAREN> statement()
}

void expression():{}{
	testing_expression()
}

void testing_expression():{}{
	(valor=<INTEGER_LITERAL> | identifier=<IDENTIFIER>) <EXPRESSION> (valor=<INTEGER_LITERAL> | identifier=<IDENTIFIER>)
	{
	    Identificador tempGeneral= new Identificador();

	  tempGeneral.setPosicion(token.beginLine);
	  tempGeneral.setTipo("Comparacion");
	  tempGeneral.setUso("Comparacion");
	  tempGeneral.setModificador("No aplica");
	  tempGeneral.setTipoDato(tipo.image);
	  tempGeneral.setNombre(identifier.image);
	  tempGeneral.setValor(valor.image);
	   ValidarAsignacion.estaDeclarado(Identificadores,tempGeneral);
	  Identificadores.add(tempGeneral);

	 
	}
}


